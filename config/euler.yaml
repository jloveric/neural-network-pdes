mlp:
  style: transform # standard
  nonlinearity: null
  layer_type: "discontinuous"
  n: 2
  n_in: null
  n_out: null
  n_hidden: null
  periodicity: 2.0
  rescale_output: False
  scale: 2.0
  normalize: True
  segments: 3
  input:
    segments: ${mlp.segments}
    width: 2
  output:
    segments: ${mlp.segments}
    width: 3
  hidden:
    segments: ${mlp.segments}
    layers: 4
    width: 20

physics:
  gamma: 1.4
  artificial_viscosity: 0.01

# pde weighting
loss_weight:
  # from the paper "Discontinuity Computing Using Physics-Informed Neural Networks"
  discontinuity: 0.1

  interior: 1
  boundary: 100
  initial: 100

# Form of equations, conservative or primitive
form: "conservative"

# Delta, offset for computing derivatives
delta: 0.01
delta_t: 0.01

# generate this many interior data points
data_size: 10000

max_epochs: 10000
gpus: 1
batch_size: 1024

# decay factor for discontinuities
factor: 0.001

# Are you training? Otherwise plot the result
train: True
checkpoint: null
rotations: 1 # NOT Implemented! 1 is x,y, 2 is x,y, x-y, x+y, greater includes additional rotations
save_images: True

defaults:
  - optimizer: adam # lbfgs
